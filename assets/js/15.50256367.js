(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{407:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[t._v("#")]),t._v(" 数据库")]),t._v(" "),a("h2",{attrs:{id:"mysql5-7安装配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql5-7安装配置"}},[t._v("#")]),t._v(" Mysql5.7安装配置")]),t._v(" "),a("h2",{attrs:{id:"命令行连接数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令行连接数据库"}},[t._v("#")]),t._v(" 命令行连接数据库")]),t._v(" "),a("p",[t._v("连接到Mysql数据库的指令\nmysql -h 主机IP -P 端口 -u 用户名 -p\n启动mysql数据库的常用方式\nnet stop mysql服务名\nnet start mysql服务名")]),t._v(" "),a("h2",{attrs:{id:"navical安装和使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navical安装和使用"}},[t._v("#")]),t._v(" Navical安装和使用")]),t._v(" "),a("h2",{attrs:{id:"sql语句分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql语句分类"}},[t._v("#")]),t._v(" SQL语句分类")]),t._v(" "),a("h3",{attrs:{id:"创建数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建数据库"}},[t._v("#")]),t._v(" 创建数据库")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建一个使用uft8字符集得数据库\ncreate database [table] character set utf8")])]),t._v(" "),a("li",[a("p",[t._v("创建一个使用utf8字符集，并带校对规则得数据库\ncreate database [table] character set utf8 collate utf8_bin")])]),t._v(" "),a("li",[a("p",[t._v("校对规则utf8_bin区分大小写 默认utf8_general_ci 不区分大小写")])])]),t._v(" "),a("h1",{attrs:{id:"crud-重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crud-重点"}},[t._v("#")]),t._v(" CRUD(重点)")]),t._v(" "),a("h2",{attrs:{id:"insert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insert"}},[t._v("#")]),t._v(" Insert")]),t._v(" "),a("blockquote",[a("p",[t._v("使用INSERT语句向表中插入数据")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("eg:\nINSERT into good(id,goods_name,price)VALUES(1,'华为手机',3000.0);")]),t._v(" "),a("blockquote",[a("p",[t._v("细节说明")])]),t._v(" "),a("ol",[a("li",[t._v("插入的数据应与字段的数据类型相同")]),t._v(" "),a("li",[t._v("数据的长度应在列的规定范围内")]),t._v(" "),a("li",[t._v("在values中列出的数据位置必须与被加入的列的排列位置相对应")]),t._v(" "),a("li",[t._v("字符和日期类型数据应包含在单引号中")]),t._v(" "),a("li",[t._v("列可以插入空值(其前提是该字段允许为空)")]),t._v(" "),a("li",[t._v("insert into tab_name(列名..)values(),(),() 形式添加多条记录")]),t._v(" "),a("li",[t._v("如果是给表中的所有字段添加数据，可以不写前面的字段名称")]),t._v(" "),a("li",[t._v("默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错")])]),t._v(" "),a("blockquote",[a("p",[t._v("在创建表时指定某个列的默认值\nCREATE TABLE good (\nid INT,\ngoods_name VARCHAR(10),\nprice DOUBLE NOT NULL DEFAULT 100);\n)")])]),t._v(" "),a("h2",{attrs:{id:"update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" Update")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" table_name \n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" col_name1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("expr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("col_name2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("expr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" where_definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("eg:UPDATE employee SET salary = 6000")]),t._v(" "),a("blockquote",[a("p",[t._v("使用细节：")])]),t._v(" "),a("ol",[a("li",[t._v("UPDATE语法可以用新值更新原有表行中的各列")]),t._v(" "),a("li",[t._v("SET子句指示要修改那些列和要给予那些值")]),t._v(" "),a("li",[t._v("WHERE子句指定应更新那些行.如没有WHERE子句，则更新所有行")]),t._v(" "),a("li",[t._v("如果修改多个字段，可以通过set 字段1 = 值1，字段2=值2.。。")])]),t._v(" "),a("h3",{attrs:{id:"delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" ta1_name\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" where_definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("eg:DELETE FROM employee WHERE user_name = '张三'")]),t._v(" "),a("blockquote",[a("p",[t._v("使用细节")])]),t._v(" "),a("ol",[a("li",[t._v("如果不使用where子句，将删除表中所有数据")]),t._v(" "),a("li",[t._v("Delete语句不能删除某一列的值（可使用update设为null或则‘ ’）")]),t._v(" "),a("li",[t._v("使用delete语句仅删除记录，不删除表本身。如要删除表，使用drop table语句")])]),t._v(" "),a("h2",{attrs:{id:"查看、删除数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看、删除数据库"}},[t._v("#")]),t._v(" 查看、删除数据库")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("删除数据[慎用]\ndrop database [table]")])]),t._v(" "),a("li",[a("p",[t._v("显示数据库库语句：\nshow databases")])]),t._v(" "),a("li",[a("p",[t._v("显示数据库创建语句\nshow create database db_name")])])]),t._v(" "),a("blockquote",[a("p",[t._v("注意\n在创建数据库表的时候，为了规避关键字，可以使用反引号解决")])]),t._v(" "),a("h3",{attrs:{id:"备份恢复数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备份恢复数据库"}},[t._v("#")]),t._v(" 备份恢复数据库")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("备份库得表(注意：在DOS执行)命令行\nmysqldump -u 用户名 -p 数据库 表1 表2 表n > d:\\文件名.sql")])]),t._v(" "),a("li",[a("p",[t._v("恢复数据库(注意：在数据库中执行)\nSource 文件名.sql")])])]),t._v(" "),a("h2",{attrs:{id:"mysql常用列表类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql常用列表类型"}},[t._v("#")]),t._v(" Mysql常用列表类型")]),t._v(" "),a("blockquote",[a("p",[t._v("字符串使用细节")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("char(4)//这个4表示字符数（最大255）,不是字节数，不管是中文还是字母都是放四个，按字符计算\nvarchar(4)//这个4表示字符数，不管是字母还是中文都以定义好的表的编码来存放数据")])]),t._v(" "),a("li",[a("p",[t._v("char(4)是定长（固定的大小），即使插入‘aa’，也会占用分配的4个字符空间\nvarchar(4)是变长，按照实际占用空间来分配（varchar本身还需要占用\n1-3个字节来记录存放内容长度）")])]),t._v(" "),a("li",[a("p",[t._v("什么时候char,什么时候使用varchar")]),t._v(" "),a("ul",[a("li",[t._v("如果数据是定长，推荐使用char，比如md5的密码，邮编，手机号码，身份证号码等")]),t._v(" "),a("li",[t._v("如果一个字段的长度是不确定，使用varchar，比如留言，文章\n查询速度： char > varchar")])])]),t._v(" "),a("li",[a("p",[t._v("在存放文本时，也可以使用Text数据类型，可以将TEXT列视为 VARCHAR列，注意\nText不能有默认值，大小0-2^16字节如果希望存放更多字符，可以选择MEDIUMTEXT 0-2^24\n或者LONGTEXT 0~2^32")])])]),t._v(" "),a("h3",{attrs:{id:"查询增强"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询增强"}},[t._v("#")]),t._v(" 查询增强")]),t._v(" "),a("p",[t._v("在mysql中，日期类型可以直接比较\n使用like操作符\n%：表示0到多个字符\n_: 表示单个字符")]),t._v(" "),a("h3",{attrs:{id:"自增长"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自增长"}},[t._v("#")]),t._v(" 自增长")]),t._v(" "),a("p",[t._v("字段名 整型 primary key auto_increment")]),t._v(" "),a("p",[t._v("使用细节")]),t._v(" "),a("ol",[a("li",[t._v("自增长和primary key配合使用")]),t._v(" "),a("li",[t._v("自增长可以单独使用，但是需要配合unique")]),t._v(" "),a("li",[t._v("自增长修饰的字段为整数型（虽然小数也可以但是非常少使用）、")]),t._v(" "),a("li",[t._v("自增长默认从1开始，也可以通过如下命令修改\nalter table 表明 auto_increment = 新的开始值")])]),t._v(" "),a("h2",{attrs:{id:"数据库crud语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库crud语句"}},[t._v("#")]),t._v(" 数据库CRUD语句")]),t._v(" "),a("h2",{attrs:{id:"合计-统计函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合计-统计函数"}},[t._v("#")]),t._v(" 合计/统计函数")]),t._v(" "),a("h3",{attrs:{id:"合计-统计函数-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合计-统计函数-count"}},[t._v("#")]),t._v(" 合计/统计函数 -count")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列明"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" table_name   \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" where_definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("count("),a("em",[t._v(") 和 count(列) 的区别\ncount(")]),t._v(") 返回满足条件的记录的行数\ncount(列) 统计满足条件的某列有多少个，但是会排除为null")]),t._v(" "),a("h3",{attrs:{id:"合计函数-sum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合计函数-sum"}},[t._v("#")]),t._v(" 合计函数 -sum")]),t._v(" "),a("p",[t._v("Sum函数返回满足where条件的行的和，一般使用在数值列")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" {"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("} "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("  table_name \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("  where_definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"合计函数-avg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合计函数-avg"}},[t._v("#")]),t._v(" 合计函数 -avg")]),t._v(" "),a("p",[t._v("AVG函数返回满足where")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" {"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("} "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("  table_name \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("  where_definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("合计函数 -Max/min\nMax/min函数返回满足where条件的一列的最大/最小值")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("  table_name \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("  where_definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"分组统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组统计"}},[t._v("#")]),t._v(" 分组统计")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" \n")])])]),a("h3",{attrs:{id:"使用having子句对分组后的结果进行过滤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用having子句对分组后的结果进行过滤"}},[t._v("#")]),t._v(" 使用having子句对分组后的结果进行过滤")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("h2",{attrs:{id:"字符串相关函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串相关函数"}},[t._v("#")]),t._v(" 字符串相关函数")]),t._v(" "),a("h3",{attrs:{id:"字符串相关函数-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串相关函数-2"}},[t._v("#")]),t._v(" 字符串相关函数")]),t._v(" "),a("p",[t._v("dual 亚元表 系统表 可以作为测试表使用")]),t._v(" "),a("h3",{attrs:{id:"日期时间相关函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期时间相关函数"}},[t._v("#")]),t._v(" 日期时间相关函数")]),t._v(" "),a("p",[t._v("|TIMEDEFF(date1，date2）|两个时间相差（多少个小时多少分钟多少秒|\n|NOW()|当前时间|\n|Year|Month|DAY|DATE(datetime) FROM_UNIXTIME() unix_timestamp()) 年月日")]),t._v(" "),a("h3",{attrs:{id:"加密函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加密函数"}},[t._v("#")]),t._v(" 加密函数")]),t._v(" "),a("p",[t._v("USER() 查询用户\nDATABASE() 数据库名称\nMD5(str) 为字符串算出一个MD5 32的字符串，（用户密码）加密\nPASSWORD(str)  从原文密码str计算并返回密码字符串，通常用于对mysql数据库的用户密码加密\nselect * from mysql.user")]),t._v(" "),a("h3",{attrs:{id:"流程控制函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程控制函数"}},[t._v("#")]),t._v(" 流程控制函数")]),t._v(" "),a("p",[t._v("IF(expr1，expr2，expr3) 如果expr1为True，则返回expr2否则返回expr3\nIFNULL(expr1，expr2)    如果expr1不为空NULL，则返回expr1否则返回expr2\nSELECT CASE WHEN expr1 THEN expr2   如果expr1为True，则返回expr2,\nWHEN expr3 THEN expr4   如果expr3为True，则返回expr4,\nELSE expr5              否则返回expr5\nEND")]),t._v(" "),a("h2",{attrs:{id:"mysql表查询-加强"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql表查询-加强"}},[t._v("#")]),t._v(" mysql表查询--加强")]),t._v(" "),a("h3",{attrs:{id:"分页查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页查询"}},[t._v("#")]),t._v(" 分页查询")]),t._v(" "),a("p",[t._v("select...limit start,rows 表示从start+1行开始取，取出rows行，start从0开始计算")]),t._v(" "),a("h3",{attrs:{id:"多子句查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多子句查询"}},[t._v("#")]),t._v(" 多子句查询")]),t._v(" "),a("p",[t._v("如果select语句同时包含group by,having,limit,order by")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v("   \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v("  condition\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表查询"}},[t._v("#")]),t._v(" 多表查询")]),t._v(" "),a("h3",{attrs:{id:"多表笛卡尔集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表笛卡尔集"}},[t._v("#")]),t._v(" 多表笛卡尔集")]),t._v(" "),a("blockquote",[a("p",[t._v("多表查询的条件不能少于表的个数-1，否则会出现笛卡尔集\n解决多表查询的关键就是要写出正确的过滤条件where")])]),t._v(" "),a("h3",{attrs:{id:"多表查询的自连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表查询的自连接"}},[t._v("#")]),t._v(" 多表查询的自连接")]),t._v(" "),a("p",[t._v("1、 把同一张表当作两张表使用\n2、 需要给表取别名 表明，表别名\n3、 列名不明确，可以指定列的别名，列明as列的别名")]),t._v(" "),a("h3",{attrs:{id:"多行子查询-嵌套查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多行子查询-嵌套查询"}},[t._v("#")]),t._v(" 多行子查询（嵌套查询）")]),t._v(" "),a("p",[t._v("多行子查询指返回多行数据的子查询，使用关键字in\n不等于符号 != <>")]),t._v(" "),a("h3",{attrs:{id:"子查询临时表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询临时表"}},[t._v("#")]),t._v(" 子查询临时表")]),t._v(" "),a("h3",{attrs:{id:"all和any的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all和any的使用"}},[t._v("#")]),t._v(" all和any的使用")]),t._v(" "),a("p",[t._v("all 所有\nany 任一")]),t._v(" "),a("h3",{attrs:{id:"多列子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多列子查询"}},[t._v("#")]),t._v(" 多列子查询")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp \n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" ename "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ALLEN'")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" ENAME "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ALLEN'")]),t._v("\n")])])]),a("h2",{attrs:{id:"表复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表复制"}},[t._v("#")]),t._v(" 表复制")]),t._v(" "),a("p",[t._v("自我复制\n1、先把emp标的记录复制到my_tab01")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" my_tab01\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("2、自我复制")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" my_tab01\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" my_tab01"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"合并查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并查询"}},[t._v("#")]),t._v(" 合并查询")]),t._v(" "),a("blockquote",[a("p",[t._v("union all 就是将两个查询结果合并，不会去重")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("  sal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2500")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("all")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" job"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MANAGER'")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("union 就是将两个查询结果合并，会去重")])]),t._v(" "),a("h2",{attrs:{id:"表外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表外连接"}},[t._v("#")]),t._v(" 表外连接")]),t._v(" "),a("p",[t._v("左外连接（显示左表所有信息）\nselect.. from 表1 left join 表2 on 条件\n右外连接（显示右表所有信息）\nselect.. from 表1 right join 表2 on 条件")]),t._v(" "),a("h2",{attrs:{id:"约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约束"}},[t._v("#")]),t._v(" 约束")]),t._v(" "),a("p",[t._v("not null(非空)\n如果在列上定义了not null，那么当插入数据时，必须提供数据\n字段名称 字段类型 not null\nunique（唯一）\n当定义了唯一约束后，该列指是不能重复的\n字段名称 字段类型 unique")]),t._v(" "),a("blockquote",[a("p",[t._v("unique细节")])]),t._v(" "),a("ol",[a("li",[t._v("如果没有指定not null，则unique字段可以有多个null")]),t._v(" "),a("li",[t._v("一张表可以有多个unique字段")])]),t._v(" "),a("p",[t._v("foreign key（外键）")]),t._v(" "),a("blockquote",[a("p",[t._v("用于定义主表和从表之间的关系：外键约束要定义再从表上，主表则必须具有主键约束或是unique约束，\n当定义外键约束后，要求外键列数据必须再主表的逐渐列存在或是为null")])]),t._v(" "),a("p",[t._v("FOREIGN key(本表字段名) REFERENCES\n表明（主键名或字段名）")]),t._v(" "),a("ol",[a("li",[t._v("外键指向的表的字段，要求是primary key或者是unique")]),t._v(" "),a("li",[t._v("表的类型是innodb，这样的表才支持外键")]),t._v(" "),a("li",[t._v("外键字段的类型要和主键字段的类型一致（长度可以不同）")]),t._v(" "),a("li",[t._v("外键字段的值，必须再主键字段中出现过，或者为null[前提是外键字段允许为null]")]),t._v(" "),a("li",[t._v("一旦建立主外键的关系，数据不能随意删除了")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" goods "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tgoods_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tgood_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tunitprice "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FLOAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("check")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tcategory "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("drop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tcustomer_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\taddress "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\temail "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tsex emum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tsex "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'man'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'woman'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tcrad_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" purchase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\torder_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tcustomer_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tgoods_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tnums "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("customer_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" customer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("customer_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("goods_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" goods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("goods_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"自增长-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自增长-2"}},[t._v("#")]),t._v(" 自增长")]),t._v(" "),a("h2",{attrs:{id:"索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),a("p",[t._v("索引的原理\n没有索引为什么会慢？因为全表扫描\n使用索引为什么会块？形成一个索引的数据结构，不如说二叉树\n索引的代价")]),t._v(" "),a("ol",[a("li",[t._v("磁盘占用")]),t._v(" "),a("li",[t._v("对dml（update delete insert）语句的效率影响")])]),t._v(" "),a("h4",{attrs:{id:"索引的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的类型"}},[t._v("#")]),t._v(" 索引的类型")]),t._v(" "),a("ol",[a("li",[t._v("主键索引，主键自动的为主索引（类型primary key）")]),t._v(" "),a("li",[t._v("唯一索引（unique）")]),t._v(" "),a("li",[t._v("普通索引（index）")]),t._v(" "),a("li",[t._v("全文索引（fulltext）[适用于MyISAM]\n开发中考虑使用：全文搜索Solr和ElasticSearch（ES)")])]),t._v(" "),a("h4",{attrs:{id:"索引的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的使用"}},[t._v("#")]),t._v(" 索引的使用")]),t._v(" "),a("ol",[a("li",[t._v("添加索引")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unique")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" index_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" tbl_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("col_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index_col_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("添加主键索引")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" 表明 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("primary")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("删除索引")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("drop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" index_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("drop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" index_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("删除主键索引比较特别")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("drop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("primary")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("查询索引")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" indexs "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("keys")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"那些列上适合使用索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#那些列上适合使用索引"}},[t._v("#")]),t._v(" 那些列上适合使用索引")]),t._v(" "),a("ol",[a("li",[t._v("比较怕频繁的作为查询条件字段应该创建索引")]),t._v(" "),a("li",[t._v("唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件\nselect * from emp where sex=‘男’;")]),t._v(" "),a("li",[t._v("更新非常频繁的字段不适合创建索引")]),t._v(" "),a("li",[t._v("不会出现where字句中字段不该创建索引")])]),t._v(" "),a("h3",{attrs:{id:"mysql事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql事务"}},[t._v("#")]),t._v(" mysql事务")]),t._v(" "),a("p",[t._v("什么是事务\n事务用于保证数据的一致性，它由一组相关的dml语句组成，改组的dml'\n语句要么全部成功要么全部失败\n事务和锁")]),t._v(" "),a("blockquote",[a("p",[t._v("当执行事务操作时（dml语句），mysql会在表上加锁，防止其他用户该表的数据")])]),t._v(" "),a("p",[t._v("mysql数据库控制台事务的几个重要操作")]),t._v(" "),a("ol",[a("li",[t._v("start transaction / set autocommit = off 开始一个事务")]),t._v(" "),a("li",[t._v("saveponit 保存点名 --设置保存点")]),t._v(" "),a("li",[t._v("rollback to 保存点名 --回退事务")]),t._v(" "),a("li",[t._v("rollback --回退全部事务")]),t._v(" "),a("li",[t._v("commit -- 提交事务，所有操作生效，不能回退")])]),t._v(" "),a("p",[t._v("事务使用细节")]),t._v(" "),a("ol",[a("li",[t._v("如果不开始事务，默认情况下dml操作是自动提交的，不能回滚")]),t._v(" "),a("li",[t._v("如果开始一个事务，没有创建保存点，执行rollback，默认回退到事务开始的状态")]),t._v(" "),a("li",[t._v("在事务提交前，可以创建多个保存点")]),t._v(" "),a("li",[t._v("在事务没有提交前，选择回退到某个保存点")]),t._v(" "),a("li",[t._v("mysql的事务机制需要innodb的存储引擎")])]),t._v(" "),a("h3",{attrs:{id:"mysql表类型和存储引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql表类型和存储引擎"}},[t._v("#")]),t._v(" mysql表类型和存储引擎")]),t._v(" "),a("p",[t._v("如何选择表的存储引擎\n1.如果应用不需要事务处理，处理的只是基本的CRUD操作，那么MyISAM是不二选择，速度块\n2. 如果需要支持事务，选择InnoDB\n3. Memory存储引擎就是将数据存储在内存中，由于没有磁盘io的等待\n速度极快，但是由于是内存存储引擎，所做的任何修改在服务器重启后将\n消失（经典用法：用户在线状态）")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--- 查看所有存储引擎")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" engins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--- 修改存储引擎")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 存储引擎"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"mysql事务-难点-分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql事务-难点-分布式事务"}},[t._v("#")]),t._v(" mysql事务（难点->分布式事务）")]),t._v(" "),a("h3",{attrs:{id:"mysql事务隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql事务隔离级别"}},[t._v("#")]),t._v(" mysql事务隔离级别")]),t._v(" "),a("p",[t._v("事务隔离级别介绍")]),t._v(" "),a("ol",[a("li",[t._v("多个连接开启各自事务操作数据库中数据时，数据库系统要负责\n隔离操作，以保证各个连接再获取数据时的准确性")]),t._v(" "),a("li",[t._v("如果不考虑隔离性，可能会引发如下问题：\n脏读(dirty read) : 当一个事务读取另一个事务尚未提交的修改时，产生脏读；\n不可重复读（nonrepeatable read) : 同一查询再同一事务中多次进行，由于其他提交事务所做\n的修改或删除，每次返回不同的结果集，此时发生不可重复读\n幻读(phantom read):同一查询再同一事务中多次进行，由于其他提交事务所做的插入操作，每次返回不同的\n结果集，此时产生幻读")])]),t._v(" "),a("p",[t._v("查看当前会话隔离级别 select @@tx_isolation;\n查看系统当前隔离级别：\nselect @@global.tx_isolation\n设置当前会话隔离级别\nset session transaction isolation level repeatable read；\n设置系统当前隔离级别\nset global transaction isolation level repeatable read;\nmysql默认的事务隔离级别是repeatable read，一般情况下，没有特殊要求，没有必要修改")]),t._v(" "),a("p",[t._v("全局修改，修改my.ini配置文件，再最后加上\n#可选参数有：READ-UNCOMMITTED,READ-COMMITTED,REPEATABLE-READ,SERIALIZABLE\n[mysqld]\ntransaction-isolation = REPEATABLE-READ")]),t._v(" "),a("h2",{attrs:{id:"视图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[t._v("#")]),t._v(" 视图")]),t._v(" "),a("h3",{attrs:{id:"视图的基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图的基本使用"}},[t._v("#")]),t._v(" 视图的基本使用")]),t._v(" "),a("ol",[a("li",[t._v("create view 视图名 as select 语句")]),t._v(" "),a("li",[t._v("alter view 视图名 as select 语句")]),t._v(" "),a("li",[t._v("show create view 视图名")]),t._v(" "),a("li",[t._v("drop view 视图名1，视图名2")])]),t._v(" "),a("h3",{attrs:{id:"视图细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图细节"}},[t._v("#")]),t._v(" 视图细节")]),t._v(" "),a("ol",[a("li",[t._v("创建视图后，到数据库去看，对应的视图只有一个视图结构文件")]),t._v(" "),a("li",[t._v("视图的数据变化会影响到基表，基表的数据变化也会影响到视图")]),t._v(" "),a("li",[t._v("视图中可以再使用视图")])]),t._v(" "),a("h3",{attrs:{id:"视图最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图最佳实践"}},[t._v("#")]),t._v(" 视图最佳实践")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("安全。一些数据表有着重要的信息。有些字段是保密的，不能让用户直接看到。\n这时就可以创建一个视图，在这张视图中只保留一部分字段。这样，用户就可以查询\n自己需要的字段，不能查看保密的字段。")])]),t._v(" "),a("li",[a("p",[t._v("性能。关系数据库的数据常常会分表存储，使用外键建立这些表的之间关系。这时，\n数据库查询通常会用到连接（join）。这样做不但麻烦，效率相对也比较低。如果\n建立一个视图，将相关的表和字段组合在一起，就可以避免使用join查询数据")])]),t._v(" "),a("li",[a("p",[t._v("灵活。如果系统中有一张旧的表，这张表由于设计的问题，即将被废弃。然而，很多\n应用都是基于这张表，不易修改。这时就可以建立一张视图，视图中的数据直接\n映射到新建的表。这样，就可以少做很多改动，也达到了升级数据表的目的。")])])]),t._v(" "),a("h2",{attrs:{id:"resultset-结果集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resultset-结果集"}},[t._v("#")]),t._v(" ResultSet 结果集")]),t._v(" "),a("p",[t._v("基本介绍")]),t._v(" "),a("ol",[a("li",[t._v("表示数据库结果集的数据表，通常通过执行查询数据库的语句生成")]),t._v(" "),a("li",[t._v("ResultSet对象保持一个光标指向当前行。")]),t._v(" "),a("li",[t._v("next方法将光标移动到下一行，并且由于在ReaultSet对象中没有更多行时返回\nfalse，因此可以在while循环中使用循环来遍历结果集。")])]),t._v(" "),a("h2",{attrs:{id:"批处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#批处理"}},[t._v("#")]),t._v(" 批处理")]),t._v(" "),a("ol",[a("li",[t._v("当需要成批插入或者更新记录时，可以采用java的批量更新机制，这一机制允许\n多条语句一次性提交给数据库批量处理。通常情况比单独提交处理更有效率")]),t._v(" "),a("li",[t._v("JDBC的批处理语句包括下面方法：\naddBatch():添加需要批量处理的SQL语句或参数\nexecuteBath():执行批处理语句；\nclearBatch():清空批处理包的语句")]),t._v(" "),a("li",[t._v("JDBC连接MySQL时，如果要使用批处理功能，在url中加入参数\nrewriteBatchedStatements=true")]),t._v(" "),a("li",[t._v("批处理和PreparedStatement一起搭配使用，即减少编译次数，又\n减少运行次数，提高效率")])]),t._v(" "),a("h1",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),a("ol",[a("li",[t._v("如果正则表达式有（）即分组")]),t._v(" "),a("li",[t._v("取出怕匹配的字符串规则如下\ngroup(0) 表示匹配到的字符串\ngroup(1) 表示匹配到的字符串的第1组字符串\ngroup(2) 表示匹配到的字符串的第2组字符串")])]),t._v(" "),a("h2",{attrs:{id:"正则转义符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则转义符"}},[t._v("#")]),t._v(" 正则转义符")]),t._v(" "),a("h3",{attrs:{id:"基本介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=n.exports}}]);